---
interface Props {
}

const { } = Astro.props;
---

<div class="music-container" id="music-container">
    <div class="music-info">
      <h4 id="title"></h4>
      <div class="progress-container" id="progress-container">
        <div class="progress" id="progress"></div>
      </div>
    </div>

    <audio src="Lardo - SINKING - 02 Nothing.mp3" id="audio"></audio>

    <div class="navigation">
      <button id="prev" class="action-btn">
        <i class="fas fa-backward"></i>
      </button>
      <button id="play" class="action-btn action-btn-big">
        <i class="fas fa-play"></i>
      </button>
      <button id="next" class="action-btn">
        <i class="fas fa-forward"></i>
      </button>
    </div>
  </div>

  <style>
      @import url('https://fonts.googleapis.com/css?family=Lato&display=swap');

      * { 
          box-sizing: border-box;
          border-radius: 10px;
      }
      
    .music-container {
      background-color: #efefef;
      background-image: linear-gradient(
        0deg,
        #4b4a4c,
        #979697
      );
      height: 70px;
      box-shadow: inset -1px -1px 5px rgba(33,33,33, 0.5), inset 1px 1px 5px rgba(33,33,33,0.5); 
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px 30px;
      position: relative;
      margin: 80px 0 0 0;
      z-index: 10;
    }

    .music-container.play .img-container img {
      animation-play-state: running;
    }

    .navigation {
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1;
    }

    .action-btn {
      border: 0;
      border-radius: 20px;
      background-color: transparent;
      font-size: 20px;
      cursor: pointer;
      padding: 10px;
      margin: 0 20px;
    }

    .action-btn.action-btn-big {
      font-size: 30px;
      outline: none;
    }

    .action-btn:focus {
      outline: 0;
    }

    .music-info {
      background-color: rgba(255, 255, 255, 0.5);
      border-radius: 15px 15px 0 0;
      position: absolute;
      top: 0;
      left: 20px;
      width: calc(100% - 40px);
      text-align: center;
      padding: 10px 10px 10px 10px;
      opacity: 0;
      transform: translateY(0%);
      transition: transform 0.3s ease-in, opacity 0.3s ease-in;
      z-index: 0;
    }

    .music-container.play .music-info {
      opacity: 1;
      transform: translateY(-100%);
    }

    .music-info h4 {
      margin: 0;
    }

    .progress-container {
      background: #fff;
      border-radius: 5px;
      cursor: pointer;
      margin: 10px 0;
      height: 4px;
      width: 100%;
    }

    .progress {
      background-color: #fe8daa;
      border-radius: 5px;
      height: 100%;
      width: 0%;
      transition: width 0.1s linear;
    }
  </style>
  <script>
    const musicContainer = document.getElementById('music-container');
    const playBtn = document.getElementById('play');
    const prevBtn = document.getElementById('prev');
    const nextBtn = document.getElementById('next');

    const audio = document.getElementById('audio');
    const progress = document.getElementById('progress');
    const progressContainer = document.getElementById('progress-container');
    const title = document.getElementById('title');
    // const durTime = document.querySelector('#durTime');

    const songs = [
        "Radiant Republic - Madness Is Not Having Enough Time to Lose Your Mind - 02 Broken in D",
        "MegaMaul - Asshat - 02 Asshat",
        "Brian Pennington - Trashscapes - 06 ",
        "Lardo - GUNMETAL EYES - 03 These Kids",
        "Loex - Fool in the Lava",
        "Brian Pennington - Fauxsrite - 04 We'll Never Make It",
        "Radiant Republic - Three Against Four - 02 Second to Last",
        "Lardo - SINKING - 02 Nothing"
    ];

    let songIndex = songs.length - 1;

    loadSong(songs[songIndex]);

    function loadSong(song) {
      title.innerText = song;
      audio.src = `${song}.mp3`;
    }

    function playSong() {
      musicContainer.classList.add('play');
      playBtn.querySelector('i.fas').classList.remove('fa-play');
      playBtn.querySelector('i.fas').classList.add('fa-pause');

      audio.play();
    }

    function pauseSong() {
      musicContainer.classList.remove('play');
      playBtn.querySelector('i.fas').classList.add('fa-play');
      playBtn.querySelector('i.fas').classList.remove('fa-pause');

      audio.pause();
    }

    function prevSong() {
      songIndex--;

      if (songIndex < 0) {
        songIndex = songs.length - 1;
      }

      loadSong(songs[songIndex]);

      playSong();
    }

    function nextSong() {
      songIndex++;

      if (songIndex > songs.length - 1) {
        songIndex = 0;
      }

      loadSong(songs[songIndex]);

      playSong();
    }

    function updateProgress(e) {
      const { duration, currentTime } = e.srcElement;
      const progressPercent = (currentTime / duration) * 100;
      progress.style.width = `${progressPercent}%`;
    }

    function setProgress(e) {
      const width = this.clientWidth;
      const clickX = e.offsetX;
      const duration = audio.duration;

      audio.currentTime = (clickX / width) * duration;
    }

    playBtn.addEventListener('click', () => {
      const isPlaying = musicContainer.classList.contains('play');

      if (isPlaying) {
        pauseSong();
      } else {
        playSong();
      }
    });

    prevBtn.addEventListener('click', prevSong);
    nextBtn.addEventListener('click', nextSong);

    audio.addEventListener('timeupdate', updateProgress);

    progressContainer.addEventListener('click', setProgress);

    audio.addEventListener('ended', nextSong);

    // audio.addEventListener('timeupdate', DurTime);
  </script>


